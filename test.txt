============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-6.2.5, py-1.11.0, pluggy-1.5.0
rootdir: /home/wsantos/git/rinha/herecomesanewchallenger
plugins: asyncio-0.15.1, Faker-19.3.0, anyio-4.3.0
collected 4 items

tests/test_database.py E                                                 [ 25%]
tests/test_main.py EEE                                                   [100%]

==================================== ERRORS ====================================
________________ ERROR at setup of test_insert_and_find_person _________________

args = (), kwargs = {}
loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7b5a42ff3250>

    def wrapper(*args, **kwargs):
        loop = fixture_stripper.get_and_strip_from(
            FixtureStripper.EVENT_LOOP, kwargs
        )
    
        async def setup():
            res = await coro(*args, **kwargs)
            return res
    
>       return loop.run_until_complete(setup())

.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:157: in setup
    res = await coro(*args, **kwargs)
tests/conftest.py:15: in setup_db
    database.init_db()
app/db.py:24: in init_db
    engine = DatabaseConnection()
app/db.py:12: in __new__
    cls._instance = create_engine(
.venv/lib/python3.10/site-packages/sqlalchemy/util/deprecations.py:281: in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
.venv/lib/python3.10/site-packages/sqlalchemy/engine/create.py:546: in create_engine
    u = _url.make_url(url)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name_or_url = None

    def make_url(name_or_url: Union[str, URL]) -> URL:
        """Given a string, produce a new URL instance.
    
        The format of the URL generally follows `RFC-1738
        <https://www.ietf.org/rfc/rfc1738.txt>`_, with some exceptions, including
        that underscores, and not dashes or periods, are accepted within the
        "scheme" portion.
    
        If a :class:`.URL` object is passed, it is returned as is.
    
        .. seealso::
    
            :ref:`database_urls`
    
        """
    
        if isinstance(name_or_url, str):
            return _parse_url(name_or_url)
        elif not isinstance(name_or_url, URL) and not hasattr(
            name_or_url, "_sqla_is_testing_if_this_is_a_mock_object"
        ):
>           raise exc.ArgumentError(
                f"Expected string or URL object, got {name_or_url!r}"
            )
E           sqlalchemy.exc.ArgumentError: Expected string or URL object, got None

.venv/lib/python3.10/site-packages/sqlalchemy/engine/url.py:846: ArgumentError
_____________________ ERROR at setup of test_create_person _____________________

args = (), kwargs = {}
loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7b5a42ff3d90>

    def wrapper(*args, **kwargs):
        loop = fixture_stripper.get_and_strip_from(
            FixtureStripper.EVENT_LOOP, kwargs
        )
    
        async def setup():
            res = await coro(*args, **kwargs)
            return res
    
>       return loop.run_until_complete(setup())

.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:157: in setup
    res = await coro(*args, **kwargs)
tests/conftest.py:15: in setup_db
    database.init_db()
app/db.py:32: in init_db
    SQLModel.metadata.create_all(bind=engine)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = MetaData(), bind = <app.db.DatabaseConnection object at 0x7b5a42f76d70>
tables = None, checkfirst = True

    def create_all(
        self,
        bind: _CreateDropBind,
        tables: Optional[_typing_Sequence[Table]] = None,
        checkfirst: bool = True,
    ) -> None:
        """Create all tables stored in this metadata.
    
        Conditional by default, will not attempt to recreate tables already
        present in the target database.
    
        :param bind:
          A :class:`.Connection` or :class:`.Engine` used to access the
          database.
    
        :param tables:
          Optional list of ``Table`` objects, which is a subset of the total
          tables in the ``MetaData`` (others are ignored).
    
        :param checkfirst:
          Defaults to True, don't issue CREATEs for tables already present
          in the target database.
    
        """
>       bind._run_ddl_visitor(
            ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
        )
E       AttributeError: 'DatabaseConnection' object has no attribute '_run_ddl_visitor'

.venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5825: AttributeError
---------------------------- Captured stdout setup -----------------------------
'DatabaseConnection' object has no attribute 'connect'
_____________________ ERROR at setup of test_find_by_term ______________________

args = (), kwargs = {}
loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7b5a42ff3d90>

    def wrapper(*args, **kwargs):
        loop = fixture_stripper.get_and_strip_from(
            FixtureStripper.EVENT_LOOP, kwargs
        )
    
        async def setup():
            res = await coro(*args, **kwargs)
            return res
    
>       return loop.run_until_complete(setup())

.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:157: in setup
    res = await coro(*args, **kwargs)
tests/conftest.py:15: in setup_db
    database.init_db()
app/db.py:32: in init_db
    SQLModel.metadata.create_all(bind=engine)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = MetaData(), bind = <app.db.DatabaseConnection object at 0x7b5a42f76d70>
tables = None, checkfirst = True

    def create_all(
        self,
        bind: _CreateDropBind,
        tables: Optional[_typing_Sequence[Table]] = None,
        checkfirst: bool = True,
    ) -> None:
        """Create all tables stored in this metadata.
    
        Conditional by default, will not attempt to recreate tables already
        present in the target database.
    
        :param bind:
          A :class:`.Connection` or :class:`.Engine` used to access the
          database.
    
        :param tables:
          Optional list of ``Table`` objects, which is a subset of the total
          tables in the ``MetaData`` (others are ignored).
    
        :param checkfirst:
          Defaults to True, don't issue CREATEs for tables already present
          in the target database.
    
        """
>       bind._run_ddl_visitor(
            ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
        )
E       AttributeError: 'DatabaseConnection' object has no attribute '_run_ddl_visitor'

.venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5825: AttributeError
_______________________ ERROR at setup of test_get_count _______________________

args = (), kwargs = {}
loop = <_UnixSelectorEventLoop running=False closed=False debug=False>
setup = <function pytest_fixture_setup.<locals>.wrapper.<locals>.setup at 0x7b5a42ff3d90>

    def wrapper(*args, **kwargs):
        loop = fixture_stripper.get_and_strip_from(
            FixtureStripper.EVENT_LOOP, kwargs
        )
    
        async def setup():
            res = await coro(*args, **kwargs)
            return res
    
>       return loop.run_until_complete(setup())

.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
.venv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:157: in setup
    res = await coro(*args, **kwargs)
tests/conftest.py:15: in setup_db
    database.init_db()
app/db.py:32: in init_db
    SQLModel.metadata.create_all(bind=engine)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = MetaData(), bind = <app.db.DatabaseConnection object at 0x7b5a42f76d70>
tables = None, checkfirst = True

    def create_all(
        self,
        bind: _CreateDropBind,
        tables: Optional[_typing_Sequence[Table]] = None,
        checkfirst: bool = True,
    ) -> None:
        """Create all tables stored in this metadata.
    
        Conditional by default, will not attempt to recreate tables already
        present in the target database.
    
        :param bind:
          A :class:`.Connection` or :class:`.Engine` used to access the
          database.
    
        :param tables:
          Optional list of ``Table`` objects, which is a subset of the total
          tables in the ``MetaData`` (others are ignored).
    
        :param checkfirst:
          Defaults to True, don't issue CREATEs for tables already present
          in the target database.
    
        """
>       bind._run_ddl_visitor(
            ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
        )
E       AttributeError: 'DatabaseConnection' object has no attribute '_run_ddl_visitor'

.venv/lib/python3.10/site-packages/sqlalchemy/sql/schema.py:5825: AttributeError
=============================== warnings summary ===============================
app/main.py:13
  /home/wsantos/git/rinha/herecomesanewchallenger/app/main.py:13: DeprecationWarning: 
          on_event is deprecated, use lifespan event handlers instead.
  
          Read more about it in the
          [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
          
    @app.on_event("startup")

.venv/lib/python3.10/site-packages/fastapi/applications.py:4495
  /home/wsantos/git/rinha/herecomesanewchallenger/.venv/lib/python3.10/site-packages/fastapi/applications.py:4495: DeprecationWarning: 
          on_event is deprecated, use lifespan event handlers instead.
  
          Read more about it in the
          [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
          
    return self.router.on_event(event_type)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ============================
ERROR tests/test_database.py::test_insert_and_find_person - sqlalchemy.exc.Ar...
ERROR tests/test_main.py::test_create_person - AttributeError: 'DatabaseConne...
ERROR tests/test_main.py::test_find_by_term - AttributeError: 'DatabaseConnec...
ERROR tests/test_main.py::test_get_count - AttributeError: 'DatabaseConnectio...
======================== 2 warnings, 4 errors in 0.88s =========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-6.2.5, py-1.11.0, pluggy-1.5.0
rootdir: /home/wsantos/git/rinha/herecomesanewchallenger
plugins: asyncio-0.15.1, Faker-19.3.0, anyio-4.3.0
collected 0 items

============================ no tests ran in 0.00s =============================
